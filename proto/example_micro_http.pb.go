// Code generated by protoc-gen-micro
// source: example.proto
package pb

import (
	context "context"
	v3 "github.com/unistack-org/micro-client-http/v3"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
	http "net/http"
)

type postClient struct {
	c    client.Client
	name string
}

func NewPostClient(name string, c client.Client) PostClient {
	return &postClient{c: c, name: name}
}

func (c *postClient) FindByID(ctx context.Context, req *FindByIDRequest, opts ...client.CallOption) (*FindByIDResponse, error) {
	errmap := make(map[string]interface{}, 3)
	errmap["200"] = &FindByIDResponse{}
	errmap["404"] = &Error{}
	errmap["500"] = &Error{}
	opts = append(opts,
		v3.ErrorMap(errmap),
	)
	opts = append(opts,
		v3.Method(http.MethodGet),
		v3.Path("/api/v1/posts/{post_id}"),
	)
	rsp := &FindByIDResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Post.FindByID", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type postServer struct {
	PostServer
}

func (h *postServer) FindByID(ctx context.Context, req *FindByIDRequest, rsp *FindByIDResponse) error {
	return h.PostServer.FindByID(ctx, req, rsp)
}

func RegisterPostServer(s server.Server, sh PostServer, opts ...server.HandlerOption) error {
	type post interface {
		FindByID(ctx context.Context, req *FindByIDRequest, rsp *FindByIDResponse) error
	}
	type Post struct {
		post
	}
	h := &postServer{sh}
	var nopts []server.HandlerOption
	for _, endpoint := range NewPostEndpoints() {
		nopts = append(nopts, api.WithEndpoint(endpoint))
	}
	return s.Handle(s.NewHandler(&Post{h}, append(nopts, opts...)...))
}
